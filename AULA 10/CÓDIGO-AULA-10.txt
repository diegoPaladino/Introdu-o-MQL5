//+------------------------------------------------------------------+
//|                                            CruzamentoMediaEA.mq5 |
//|                                                    diegoPaladino |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "diegoPaladino"
#property link      "https://www.mql5.com"
#property version   "1.00"

#include <Trade/Trade.mqh>
#include <Trade/SymbolInfo.mqh>

input int PeriodoLongo = 20; //Período Média Longa
input int PeriodoCurto = 10; //Período Média Longa
input double SL = 3.0; //StopLoss
input double TP = 5.0; // Take Profit
input double Volume = 5; // Volume
input string inicio = "09:05"; // Horário de Início (entradas)
input string termino = "17:00"; // Horário de Término (entradas)
input string fechamento = "17:30"; // Horário de Fechamento (posições)

int handlemedialonga, handlemediacurta;

CTrade negocio;
CSymbolInfo simbolo;

MqlDateTime horario_inicio, horario_termino, horario_fechamento, horario_atual;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
//---
   if(!simbolo.Name(_Symbol))
   {
   printf("Ativo Inválido!");
      return INIT_FAILED;
   }

   handlemediacurta = iCustom(_Symbol, _Period, "MediaMovel", PeriodoCurto);
   handlemediacurta = iCustom(_Symbol, _Period, "MediaMovel", PeriodoLongo);
   
   if(handlemediacurta == INVALID_HANDLE || handlemedialonga == INVALID_HANDLE)
      {
      Print("Erro na criação dos manipuladores");
      return INIT_FAILED;
      }

     
   if(PeriodoLongo <= PeriodoCurto)
      {
      Print("Parâmetros de médias incorretos");
      return INIT_FAILED;
      }    
//---

   TimeToStruct(StringToTime(inicio), horario_inicio);
   TimeToStruct(StringToTime(termino), horario_termino);
   TimeToStruct(StringToTime(fechamento), horario_fechamento);

   if(horario_inicio.hour > horario_termino.hour || (horario_inicio.hour == horario_termino.hour && horario_inicio.min == horario_termino.hour))
     {
         printf("Parâmetros de horário inválidos");
         return INIT_FAILED;
     }

if(horario_termino.hour > horario_fechamento.hour || (horario_termino.hour == horario_fechamento.hour && horario_termino.min == horario_fechamento.hour))
     {
         printf("Parâmetros de horário inválidos");
         return INIT_FAILED;
     }

   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
//---
   printf("Deinit reason: %d", reason);
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
//---
   
   if(!simbolo.RefreshRates())
      return;
   
   if(HorarioEntrada())
     {
      if(SemPosicao())
        {
         int resultado_cruzamento = Cruzamento();
            if(resultado_cruzamento == 1)
               Compra();
            if(resultado_cruzamento == -1)
               Venda();
        }
     }
   
   if(HorarioFechamento())
     {
      if(!SemPosicao())
         Fechar();
     }
   
  }
bool HorarioEntrada()
{
   TimeToStruct(TimeCurrent(), horario_atual);
   if(horario_atual.hour <= horario_inicio.hour && horario_atual.hour >= horario_termino.hour)
     {
         if(horario_atual.hour == horario_inicio.hour)
            if(horario_atual.min >= horario_inicio.min)
               return true;
            else
               return false;
               
         if(horario_atual.hour == horario_termino.hour)
            if(horario_atual.min >= horario_termino.min)
               return true;
            else
               return false;
               
         return true;
     }
     
     return false;
}
bool HorarioFechamento()
{
   TimeToStruct(TimeCurrent(), horario_atual);
   if(horario_atual.hour >= horario_fechamento.hour)
     {
         if(horario_atual.hour == horario_fechamento.hour)
            if(horario_atual.min >= horario_fechamento.min)
               return true;
            else
               return false;
         
         return true;
     }
     
     return false;
}
void Compra()
{
   double price = simbolo.Ask();
   double stoploss = simbolo.NormalizePrice(price - SL);
   double takeprofit = simbolo.NormalizePrice(price + TP);
   negocio.Buy(Volume, NULL, price, stoploss, takeprofit, "Compra CruzamentoMediaEA");
}
void Venda()
{
   double price = simbolo.Ask();
   double stoploss = simbolo.NormalizePrice(price + SL);
   double takeprofit = simbolo.NormalizePrice(price - TP);
   negocio.Sell(Volume, NULL, price, stoploss, takeprofit, "Venda CruzamentoMediaEA");
}
void Fechar()
{
   if(PositionSelect(_Symbol))
      return;
      
   long tipo = PositionGetInteger(POSITION_TYPE);
      if(tipo == POSITION_TYPE_BUY)
         negocio.Sell(Volume, NULL, 0,0,0, "Fechamento CruzamentoMediaEA");
      else
         negocio.Buy(Volume, NULL, 0,0,0, "Fechamento CruzamentoMediaEA");
}
bool SemPosicao()
{
   return !PositionSelect (_Symbol);  
}
int Cruzamento()
{
   double MediaCurta[], MediaLonga[];
   ArraySetAsSeries(MediaCurta, true);
   ArraySetAsSeries(MediaLonga, true);
   CopyBuffer(handlemediacurta, 0, 0, 2, MediaCurta);
   CopyBuffer(handlemedialonga, 0, 0, 2, MediaLonga);
   
   //Compra
   if(MediaCurta[1] <= MediaLonga[1] && MediaCurta[0] > MediaLonga[0])
      return 1;
      
   //Venda
   if(MediaCurta[1] >= MediaLonga[1] && MediaCurta[0] < MediaLonga[0])
      return -1;
   return 0;
}
//+------------------------------------------------------------------+
